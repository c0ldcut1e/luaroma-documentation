{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Luaroma Documentation","text":"<p>Welcome to the Luaroma API documentation. This site provides a structured overview of all available classes, types, and functions.</p> <ul> <li>Start with the API Reference</li> <li>View the changelog here</li> </ul>"},{"location":"#how-to-use-the-luaroma-plugin","title":"How to use the Luaroma plugin","text":"<ul> <li>To use the plugin, download it and place it in <code>fs/vol/external01/wiiu/environments/aroma/plugins</code>.</li> <li>Create a folder called <code>luaroma</code> in <code>fs/vol/external01/wiiu/</code> and another folder called <code>scripts</code> inside that folder. This is where all lua scripts will be put.</li> <li>Now you can write any lua script with the help of this documentation and put it inside the scripts folder. The scripts will be automatically loaded as soon as your Wii U and the plugin gets enabled.</li> </ul>"},{"location":"#intellisense-in-vscode-and-other-ides","title":"Intellisense in VSCode and other IDE's","text":"<p>It can be annoying to code without intellisense, especially with something like Luaroma. What can you do? Paste this at the top of your file, its basically a small documentation and if you need intellisense, it will help with that.</p> <pre><code>---@class UInt64\n---@field hex fun(self: UInt64): string\n---@field num fun(self: UInt64): number\n---@operator eq(UInt64): boolean\n\n---@class VPadButtonType\n---@field A integer\n---@field B integer\n---@field X integer\n---@field Y integer\n---@field LEFT integer\n---@field RIGHT integer\n---@field UP integer\n---@field DOWN integer\n---@field ZL integer\n---@field ZR integer\n---@field L integer\n---@field R integer\n---@field PLUS integer\n---@field MINUS integer\n---@field HOME integer\n---@field SYNC integer\n---@field STICK_R integer\n---@field STICK_L integer\n---@field TV integer\n\n---@class VPadStickType\n---@field R_EMULATION_LEFT integer\n---@field R_EMULATION_RIGHT integer\n---@field R_EMULATION_UP integer\n---@field R_EMULATION_DOWN integer\n---@field L_EMULATION_LEFT integer\n---@field L_EMULATION_RIGHT integer\n---@field L_EMULATION_UP integer\n---@field L_EMULATION_DOWN integer\n\n---@class VPadStatusType\n---@field hold integer\n---@field trigger integer\n---@field release integer\n\n---@class TimeFormatType\n---@field TICKS integer\n---@field NANOSECONDS integer\n---@field MICROSECONDS integer\n---@field MILLISECONDS integer\n---@field SECONDS integer\n\n---@class LuaromaType\n---@field VPadButton VPadButtonType\n---@field VPadStick VPadStickType\n---@field VPadStatus VPadStatusType\n---@field TimeFormat TimeFormatType\n---@field uint64 fun(str: string): UInt64\n---@field Print fun(str: string): nil\n---@field Write fun(str: string): nil\n---@field KernelMemcpy fun(dest: integer, src: integer, size: integer): nil\n---@field KernelMemset fun(dest: integer, value: integer, size: integer): nil\n---@field Peek8 fun(address: integer): integer\n---@field Peek16 fun(address: integer): integer\n---@field Peek32 fun(address: integer): integer\n---@field Poke8 fun(address: integer, value: integer): nil\n---@field Poke16 fun(address: integer, value: integer): nil\n---@field Poke32 fun(address: integer, value: integer): nil\n---@field VPadRead fun(): VPadStatusType\n---@field TimeToTicks fun(value: UInt64, timeFormat: integer): UInt64\n---@field GetSystemTime fun(): UInt64\n---@field OSSleepTicks fun(ticks: UInt64): nil\n---@field OSFatal fun(message: string): nil\n---@field FileExists fun(path: string): boolean\n---@field CreateDirectory fun(path: string): boolean\n---@field CopyFile fun(src: string, dest: string): boolean\n---@field WriteToFile fun(path: string, data: string): boolean\n---@field ReadFile fun(path: string): string\n---@field HttpGet fun(url: string): string\n---@field HttpPost fun(url: string, body: string): string\n---@field DownloadToFile fun(url: string, path: string): boolean\n\n---@type LuaromaType\nLuaroma = Luaroma or {}\n</code></pre>"},{"location":"#changelog","title":"Changelog","text":""},{"location":"#luaroma-v003a","title":"Luaroma v0.0.3a","text":"<ul> <li>Fixed <code>VPadRead</code> calling <code>OSFatal</code> when there were no samples to read and changed <code>VPadRead</code> from <code>VPadRead(channel, count)</code> to <code>VPadRead()</code>.</li> <li>Fixed a bug in the license key generator.</li> </ul>"},{"location":"#luaroma-v008a","title":"Luaroma v0.0.8a","text":"<ul> <li>Removed <code>KernelWrite32</code></li> <li>Removed <code>KernelRead32</code></li> <li>Added <code>KernelMemcpy</code></li> <li>Added <code>KernelMemset</code></li> <li>Added <code>Peek8</code></li> <li>Added <code>Peek16</code></li> <li>Added <code>Peek32</code></li> <li>Added <code>Poke8</code></li> <li>Added <code>Poke16</code></li> <li>Added <code>Poke32</code></li> <li>Added <code>OSGetSystemTime</code></li> <li>Added <code>OSFatal</code></li> <li>Added <code>FileExists</code></li> <li>Added <code>CreateDirectory</code></li> <li>Added <code>CopyFile</code></li> <li>Added <code>WriteToFile</code></li> <li>Added <code>ReadFile</code></li> <li>Added <code>HttpGet</code></li> <li>Added <code>HttpPost</code></li> <li>Added <code>DownloadToFile</code></li> </ul>"},{"location":"#luaroma-v009a","title":"Luaroma v0.0.9a","text":"<ul> <li>Changed it so when a Lua Script error occurs it shows you what the error is.</li> </ul>"},{"location":"#luaroma-v010a","title":"Luaroma v0.1.0a","text":"<ul> <li>Fixed the Lua Script error message being broken</li> </ul>"},{"location":"api/overview/","title":"API Reference","text":"<p>Here you can find all types and functions for Luaroma.</p> <ul> <li>Types</li> <li>Functions</li> </ul>"},{"location":"api/functions/copyfile/","title":"CopyFile","text":""},{"location":"api/functions/copyfile/#how-to-use","title":"How to use","text":"<p>Copies a file from the <code>src</code> path to the <code>dest</code> path. Returns <code>true</code> if successful. Example:</p> <pre><code>local success = Luaroma.CopyFile(\"fs:/vol/external01/source.txt\", \"fs:/vol/external01/destination.txt\")\nLuaroma.Print(success)\n</code></pre> <p><code>fs:/vol/external01</code> is the SD Card.</p>"},{"location":"api/functions/copyfile/#signature","title":"Signature","text":"<pre><code>---@field CopyFile fun(src: string, dest: string): boolean\n</code></pre>"},{"location":"api/functions/createdirectory/","title":"CreateDirectory","text":""},{"location":"api/functions/createdirectory/#how-to-use","title":"How to use","text":"<p>Creates a new directory at the specified <code>path</code>. Returns <code>true</code> on success. Example:</p> <pre><code>local success = Luaroma.CreateDirectory(\"fs:/vol/external01/myfolder\")\nLuaroma.Print(success)\n</code></pre> <p><code>fs:/vol/external01</code> is the SD Card.</p>"},{"location":"api/functions/createdirectory/#signature","title":"Signature","text":"<pre><code>---@field CreateDirectory fun(path: string): boolean\n</code></pre>"},{"location":"api/functions/downloadtofile/","title":"DownloadToFile","text":""},{"location":"api/functions/downloadtofile/#how-to-use","title":"How to use","text":"<p>Downloads the content from the given URL (<code>url</code>) and writes it to the specified file path (<code>path</code>). Returns <code>true</code> if successful. Example:</p> <pre><code>local success = Luaroma.DownloadToFile(\"http://example.com/file.txt\", \"fs:/vol/external01/file.txt\")\nLuaroma.Print(success)\n</code></pre> <p><code>fs:/vol/external01</code> is the SD Card.</p>"},{"location":"api/functions/downloadtofile/#signature","title":"Signature","text":"<pre><code>---@field DownloadToFile fun(url: string, path: string): boolean\n</code></pre>"},{"location":"api/functions/fileexists/","title":"FileExists","text":""},{"location":"api/functions/fileexists/#how-to-use","title":"How to use","text":"<p>Checks if the given file path (<code>path</code>) exists on the system. Returns <code>true</code> if it does, otherwise <code>false</code>. Example:</p> <pre><code>local exists = Luaroma.FileExists(\"fs:/vol/external01/myfile.txt\")\nLuaroma.Print(exists)\n</code></pre> <p><code>fs:/vol/external01</code> is the SD Card.</p>"},{"location":"api/functions/fileexists/#signature","title":"Signature","text":"<pre><code>---@field FileExists fun(path: string): boolean\n</code></pre>"},{"location":"api/functions/httpget/","title":"HttpGet","text":""},{"location":"api/functions/httpget/#how-to-use","title":"How to use","text":"<p>Performs an HTTP GET request to the given URL (<code>url</code>) and returns the response body as a string. Example:</p> <pre><code>local response = Luaroma.HttpGet(\"http://example.com\")\nLuaroma.Print(response)\n</code></pre>"},{"location":"api/functions/httpget/#signature","title":"Signature","text":"<pre><code>---@field HttpGet fun(url: string): string\n</code></pre>"},{"location":"api/functions/httppost/","title":"HttpPost","text":""},{"location":"api/functions/httppost/#how-to-use","title":"How to use","text":"<p>Performs an HTTP POST request to the given URL (<code>url</code>) with the provided body (<code>body</code>). Returns the server's response as a string. Example:</p> <pre><code>local response = Luaroma.HttpPost(\"http://example.com/post\", \"key=value&amp;other=123\")\nLuaroma.Print(response)\n</code></pre>"},{"location":"api/functions/httppost/#signature","title":"Signature","text":"<pre><code>---@field HttpPost fun(url: string, body: string): string\n</code></pre>"},{"location":"api/functions/kernelmemcpy/","title":"KernelMemcpy","text":""},{"location":"api/functions/kernelmemcpy/#how-to-use","title":"How to use","text":"<p>Copies memory from a source address (<code>src</code>) to a destination address (<code>dest</code>) using kernel-level access. This is required for memory regions that are protected or require cache flushes to reflect changes. For example, to copy <code>0x20</code> bytes from <code>0x100000000</code> to <code>0x11000000</code>:</p> <pre><code>Luaroma.KernelMemcpy(0x11000000, 0x10000000, 0x20)\n</code></pre>"},{"location":"api/functions/kernelmemcpy/#signature","title":"Signature","text":"<pre><code>---@field KernelMemcpy fun(dest: integer, src: integer, size: integer): nil\n</code></pre>"},{"location":"api/functions/kernelmemset/","title":"KernelMemset","text":""},{"location":"api/functions/kernelmemset/#how-to-use","title":"How to use","text":"<p>Fills memory at a destination address (<code>dest</code>) with a specified byte value using kernel-level access. This is useful for zeroing or initializing protected memory regions. For example, to fill <code>0x40</code> bytes at <code>0x11000000</code> with <code>0xFF</code>:</p> <pre><code>Luaroma.KernelMemset(0x11000000, 0xFF, 0x40)\n</code></pre>"},{"location":"api/functions/kernelmemset/#signature","title":"Signature","text":"<pre><code>---@field KernelMemset fun(dest: integer, value: integer, size: integer): nil\n</code></pre>"},{"location":"api/functions/osfatal/","title":"OSFatal","text":""},{"location":"api/functions/osfatal/#how-to-use","title":"How to use","text":"<p>Causes an OSPanic and displays a message on screen.</p>"},{"location":"api/functions/osfatal/#signature","title":"Signature","text":"<pre><code>---@field OSFatal fun(message: string): nil\n</code></pre>"},{"location":"api/functions/osgetsystemtime/","title":"OSGetSystemTime","text":""},{"location":"api/functions/osgetsystemtime/#how-to-use","title":"How to use","text":"<p>Returns how long the system has been running in time as a UInt64.</p>"},{"location":"api/functions/osgetsystemtime/#signature","title":"Signature","text":"<pre><code>---@field GetSystemTime fun(): UInt64\n</code></pre>"},{"location":"api/functions/ossleepticks/","title":"OSSleepTicks","text":""},{"location":"api/functions/ossleepticks/#how-to-use","title":"How to use","text":"<p>Sleeps the current script for a given amount of ticks, for example to sleep the script for 1 second using TimeFormat and TimeToTicks:</p> <pre><code>local timeToWait = Luaroma.TimeToTicks(Luaroma.UInt64(\"1\"), Luaroma.TimeFormat.SECONDS)\nOSSleepTicks(timeToWait)\n</code></pre>"},{"location":"api/functions/ossleepticks/#signature","title":"Signature","text":"<pre><code>---@field OSSleepTicks fun(ticks: UInt64): nil\n</code></pre>"},{"location":"api/functions/overview/","title":"Functions","text":""},{"location":"api/functions/overview/#logging","title":"Logging","text":"<ul> <li>Print</li> <li>Write</li> </ul>"},{"location":"api/functions/overview/#kernel","title":"Kernel","text":"<ul> <li>KernelWrite32</li> <li>KernelRead32</li> </ul>"},{"location":"api/functions/overview/#input","title":"Input","text":"<ul> <li>VPadRead</li> </ul>"},{"location":"api/functions/overview/#time","title":"Time","text":"<ul> <li>TimeToTicks</li> </ul>"},{"location":"api/functions/overview/#thread","title":"Thread","text":"<ul> <li>OSSleepTicks</li> </ul>"},{"location":"api/functions/peek16/","title":"Peek16","text":""},{"location":"api/functions/peek16/#how-to-use","title":"How to use","text":"<p>Reads a 16-bit value from the specified memory address (<code>address</code>). The address should ideally be 2-byte aligned.</p> <pre><code>local value = Luaroma.Peek16(0x10000000)\n</code></pre>"},{"location":"api/functions/peek16/#signature","title":"Signature","text":"<pre><code>---@field Peek16 fun(address: integer): integer\n</code></pre>"},{"location":"api/functions/peek32/","title":"Peek32","text":""},{"location":"api/functions/peek32/#how-to-use","title":"How to use","text":"<p>Reads a 32-bit value from the specified memory address (<code>address</code>). The address should be 4-byte aligned.</p> <pre><code>local value = Luaroma.Peek32(0x10000000)\n</code></pre>"},{"location":"api/functions/peek32/#signature","title":"Signature","text":"<pre><code>---@field Peek32 fun(address: integer): integer\n</code></pre>"},{"location":"api/functions/peek8/","title":"Peek8","text":""},{"location":"api/functions/peek8/#how-to-use","title":"How to use","text":"<p>Reads a single byte from the specified memory address (<code>address</code>).</p> <pre><code>local value = Luaroma.Peek8(0x10000000)\n</code></pre>"},{"location":"api/functions/peek8/#signature","title":"Signature","text":"<pre><code>---@field Peek8 fun(address: integer): integer\n</code></pre>"},{"location":"api/functions/poke16/","title":"Poke16","text":""},{"location":"api/functions/poke16/#how-to-use","title":"How to use","text":"<p>Writes a 16-bit value (<code>value</code>) to the specified memory address (<code>address</code>). The address should ideally be 2-byte aligned.</p> <pre><code>Luaroma.Poke16(0x10000000, 0xCAFE)\n</code></pre>"},{"location":"api/functions/poke16/#signature","title":"Signature","text":"<pre><code>---@field Poke16 fun(address: integer, value: integer): nil\n</code></pre>"},{"location":"api/functions/poke32/","title":"Poke32","text":""},{"location":"api/functions/poke32/#how-to-use","title":"How to use","text":"<p>Writes a 32-bit value (<code>value</code>) to the specified memory address (<code>address</code>). The address should be 4-byte aligned.</p> <pre><code>Luaroma.Poke32(0x10000000, 0xDEADCAFE)\n</code></pre>"},{"location":"api/functions/poke32/#signature","title":"Signature","text":"<pre><code>---@field Poke32 fun(address: integer, value: integer): nil\n</code></pre>"},{"location":"api/functions/poke8/","title":"Poke8","text":""},{"location":"api/functions/poke8/#how-to-use","title":"How to use","text":"<p>Writes a single byte (<code>value</code>) to the specified memory address (<code>address</code>). For example, to write <code>0xAB</code> to <code>0x10000000</code>:</p> <pre><code>Luaroma.Poke8(0x10000000, 0xAB)\n</code></pre>"},{"location":"api/functions/poke8/#signature","title":"Signature","text":"<pre><code>---@field Poke8 fun(address: integer, value: integer): nil\n</code></pre>"},{"location":"api/functions/print/","title":"Print","text":""},{"location":"api/functions/print/#how-to-use","title":"How to use","text":"<p>This function is basically the same as the Write function but it appends a <code>\\n</code> at the end for a linebreak. Example:</p> <pre><code>Luaroma.Print(\"Hello, World!\")\n</code></pre>"},{"location":"api/functions/print/#signature","title":"Signature","text":"<pre><code>---@field Print fun(str: string): nil\n</code></pre>"},{"location":"api/functions/readfile/","title":"ReadFile","text":""},{"location":"api/functions/readfile/#how-to-use","title":"How to use","text":"<p>Reads the entire content of the file at the given <code>path</code> and returns it as a string. Example:</p> <pre><code>local content = Luaroma.ReadFile(\"/vol/external01/input.txt\")\nLuaroma.Print(content)\n</code></pre>"},{"location":"api/functions/readfile/#signature","title":"Signature","text":"<pre><code>---@field ReadFile fun(path: string): string\n</code></pre>"},{"location":"api/functions/timetoticks/","title":"TimeToTicks","text":""},{"location":"api/functions/timetoticks/#how-to-use","title":"How to use","text":"<p>This function can convert a given value of time to ticks. Used for OSSleepTicks. For example, to make the script wait for 1 second:</p> <pre><code>local timeToWait = Luaroma.TimeToTicks(Luaroma.UInt64(\"1\"), Luaroma.TimeFormat.SECONDS)\nOSSleepTicks(timeToWait)\n</code></pre> <p><code>TimeFormat</code> can be found here.</p>"},{"location":"api/functions/timetoticks/#signature","title":"Signature","text":"<pre><code>---@field TimeToTicks fun(value: UInt64, timeFormat: integer): UInt64\n</code></pre>"},{"location":"api/functions/vpadread/","title":"VPadRead","text":""},{"location":"api/functions/vpadread/#how-to-use","title":"How to use","text":"<p>This function returns a VPadStatus used for checking which buttons are being pressed on the Wii U Gamepad. For example:</p> <pre><code>local status = Luaroma.VPadRead()\nif status ~= nil then\n    local heldButtons = status.hold\n    local isAButtonPressed = heldButtons &amp; Luaroma.VPadButton.A\nend\n</code></pre> <p>Checking if status is <code>nil</code> is important because sometimes it will be <code>nil</code> due to there being no samples to read.</p>"},{"location":"api/functions/vpadread/#signature","title":"Signature","text":"<pre><code>---@field VPadRead fun(): VPadStatusType\n</code></pre>"},{"location":"api/functions/write/","title":"Write","text":""},{"location":"api/functions/write/#how-to-use","title":"How to use","text":"<p>This function writes to the Cafe Log and the UDP Log of the Wii U. This does not append a linebreak at the end of the string unlike Print does. Example:</p> <pre><code>Luaroma.Write(\"Hello, World!\")\n</code></pre>"},{"location":"api/functions/write/#signature","title":"Signature","text":"<pre><code>---@field Write fun(str: string): nil\n</code></pre>"},{"location":"api/functions/writetofile/","title":"WriteToFile","text":""},{"location":"api/functions/writetofile/#how-to-use","title":"How to use","text":"<p>Writes the given <code>data</code> string to the file at <code>path</code>. Overwrites the file if it already exists. Returns <code>true</code> on success. Example:</p> <pre><code>local success = Luaroma.WriteToFile(\"fs:/vol/external01/output.txt\", \"Hello, world!\")\nLuaroma.Print(success)\n</code></pre> <p><code>fs:/vol/external01</code> is the SD Card.</p>"},{"location":"api/functions/writetofile/#signature","title":"Signature","text":"<pre><code>---@field WriteToFile fun(path: string, data: string): boolean\n</code></pre>"},{"location":"api/types/overview/","title":"Types","text":""},{"location":"api/types/overview/#core-types","title":"Core Types","text":"<ul> <li>UInt64</li> </ul>"},{"location":"api/types/overview/#input","title":"Input","text":"<ul> <li>VPadStatus</li> </ul>"},{"location":"api/types/overview/#time","title":"Time","text":"<ul> <li>TimeFormat</li> </ul>"},{"location":"api/types/timeformat/","title":"TimeFormat","text":""},{"location":"api/types/timeformat/#how-to-use","title":"How to use","text":"<p>TimeFormat represents the format some Luaroma functions should use for time. For example the TimeToTicks function uses it to convert the given value to the correct value in the correct time format. For example:</p> <pre><code>local hundredMillisecsTicks = Luaroma.TimeToTicks(Luaroma.Uint64(\"1000\"), Luaroma.TimeFormat.MILLISECONDS)\n</code></pre>"},{"location":"api/types/timeformat/#class","title":"Class","text":"<p>Quick mention about this: The class is called <code>TimeFormatType</code> but can and should be used as <code>TimeFormat</code>, to be exact: <code>Luaroma.TimeFormat</code>.</p> <pre><code>---@class TimeFormatType\n---@field TICKS integer\n---@field NANOSECONDS integer\n---@field MICROSECONDS integer\n---@field MILLISECONDS integer\n---@field SECONDS integer\n</code></pre>"},{"location":"api/types/uint64/","title":"Uint64","text":""},{"location":"api/types/uint64/#how-to-use","title":"How to use","text":"<p>Lua by default does not support the Uint64 data type which alot of Wii U functions use, so Luaroma has added this. You can create a Uint64 by doing:</p> <pre><code>Luaroma.Uint64(\"0x00050000101DBE00\")\n</code></pre> <p>First use the global <code>Luaroma</code> object and then use create the Uint64. The Uint64 in this case uses a string to construct due to lua not supporting this type, like mentionend earlier.  To get the actual value of the Uint64 you can do this:</p> <pre><code>Luaroma.Uint64(\"0x00050000101DBE00\"):num()\n</code></pre> <p><code>num</code> returns the actual value of it. To get a formatted string of it directly you can do:</p> <pre><code>Luaroma.Uint64(\"0x00050000101DBE00\"):hex()\n</code></pre> <p>In this case it would simply return <code>0x00050000101DBE00</code> as a string.</p>"},{"location":"api/types/uint64/#class","title":"Class","text":"<pre><code>---@class UInt64\n---@field hex fun(self: UInt64): string\n---@field num fun(self: UInt64): number\n---@operator eq(UInt64): boolean\n</code></pre>"},{"location":"api/types/vpadbutton/","title":"VPadButton","text":"<p>VPadButtons are all types you need for VPadRead. If you, for example, want to check if the button A is pressed, you can use <code>Luaroma.VPadButton.A</code></p>"},{"location":"api/types/vpadbutton/#class","title":"Class","text":"<p>Quick mention about this: The class is called <code>VPadButtonType</code> but can and should be used as <code>VPadButton</code>, to be exact: <code>Luaroma.VPadButton</code>.</p> <pre><code>---@class VPadButtonType\n---@field A integer\n---@field B integer\n---@field X integer\n---@field Y integer\n---@field LEFT integer\n---@field RIGHT integer\n---@field UP integer\n---@field DOWN integer\n---@field ZL integer\n---@field ZR integer\n---@field L integer\n---@field R integer\n---@field PLUS integer\n---@field MINUS integer\n---@field HOME integer\n---@field SYNC integer\n---@field STICK_R integer\n---@field STICK_L integer\n---@field TV integer\n</code></pre>"},{"location":"api/types/vpadstatus/","title":"VPadStatus","text":""},{"location":"api/types/vpadstatus/#how-to-use","title":"How to use","text":"<p>VPadStatus is generally used for the VPad. It currently supports 3 integers: <code>hold</code>, <code>trigger</code>, <code>release</code>. To get a VPadStatus you can use VPadRead function. For example:</p> <pre><code>local currentVPadHold = VPadRead(0, 1).hold\n</code></pre>"},{"location":"api/types/vpadstatus/#class","title":"Class","text":"<p>Quick mention about this: The class is called <code>VPadStatusType</code> but can and should be used as <code>VPadStatus</code>, to be exact: <code>Luaroma.VPadStatus</code>.</p> <pre><code>---@class VPadStatusType\n---@field hold integer\n---@field trigger integer\n---@field release integer\n</code></pre>"},{"location":"api/types/vpadstick/","title":"VPadStick","text":"<p>VPadButtons are all types you need for VPadRead for the joysticks.</p>"},{"location":"api/types/vpadstick/#class","title":"Class","text":"<p>Quick mention about this: The class is called <code>VPadStickType</code> but can and should be used as <code>VPadStick</code>, to be exact: <code>Luaroma.VPadStick</code>.</p> <pre><code>---@class VPadStickType\n---@field R_EMULATION_LEFT integer\n---@field R_EMULATION_RIGHT integer\n---@field R_EMULATION_UP integer\n---@field R_EMULATION_DOWN integer\n---@field L_EMULATION_LEFT integer\n---@field L_EMULATION_RIGHT integer\n---@field L_EMULATION_UP integer\n---@field L_EMULATION_DOWN integer\n</code></pre>"}]}